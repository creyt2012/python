toán tử python
Các toán tử số học được sử dụng với các giá trị số để thực hiện các phép toán phổ biến:


+ | Addition = x + y
- | Subtraction = x - y
* | Multiplication = x * y
/ | division = x / y
% | Modulus = x % y
** | Exponentiation = x ** y
// | Floor division = x // y
----------------------------------
Gán giá trị cho biến?????
Toán tử gán được sử dụng để gán giá trị cho biến:



=	x = 5	x = 5	
+=	x += 3	x = x + 3	
-=	x -= 3	x = x - 3	
*=	x *= 3	x = x * 3	
/=	x /= 3	x = x / 3	
%=	x %= 3	x = x % 3	
//=	x //= 3	x = x // 3	
**=	x **= 3	x = x ** 3	
&=	x &= 3	x = x & 3	
|=	x |= 3	x = x | 3	
^=	x ^= 3	x = x ^ 3	
>>=	x >>= 3	x = x >> 3	
<<=     x <<= 3	x = x << 3

 example : 
x = 5 
print(x)
-------------------------------------
Toán tử so sánh Python
Toán tử so sánh được sử dụng để so sánh hai giá trị:



==	Equal	x == y	
!=	Not equal	x != y	
>	Greater than	x > y	
<	Less than	x < y	
>=	Greater than or equal to	x >= y	
<=	Less than or equal to	x <= y

example : 
x = 5
y = 3

print(x <= y)

# returns False because 5 is neither less than or equal to 3 
kết quả trả về false

---------------------------------------

Toán tử logic Python
Các toán tử logic được sử dụng để kết hợp các câu điều kiện:

and 	Returns True if both statements are true	x < 5 and  x < 10	
or	Returns True if one of the statements is true	x < 5 or x < 4	
not	Reverse the result, returns False if the result is true	not(x < 5 and x < 10)


x = 5

print(x > 3 and x < 10)

# returns True because 5 is greater than 3 AND 5 is less than 10 
kết quả trả về true 
----------------------------------------
Toán tử nhận dạng Python
Các toán tử nhận dạng được sử dụng để so sánh các đối tượng, không phải nếu chúng bằng nhau, mà nếu chúng thực sự là cùng một đối tượng, với cùng một vị trí bộ nhớ:

is 	Returns True if both variables are the same object	x is y	
is not	Returns True if both variables are not the same object	x is not y


example :

x = ["apple", "banana"]
y = ["apple", "banana"]
z = x

print(x is z)

# returns True because z is the same object as x

print(x is y)

# returns False because x is not the same object as y, even if they have the same content

print(x == y)

# to demonstrate the difference betweeen "is" and "==": this comparison returns True because x is equal to y

kết quả trả về tương ứng True , False , True
 ---------------------------------------------
Toán tử thành viên Python
Các toán tử thành viên được sử dụng để kiểm tra xem một chuỗi có được trình bày trong một đối tượng hay không:


in 	Returns True if a sequence with the specified value is present in the object	x in y	
not in	Returns True if a sequence with the specified value is not present in the object  x not in y


example : 

x = ["apple", "banana"]

print("pineapple" not in x)

# returns True because a sequence with the value "pineapple" is not in the list
kết quả trả về tương ứng : true
----------------------------------------------------

Toán tử Bitwise Python
Toán tử bitwise được sử dụng để so sánh các số (nhị phân):

& 	AND	Sets each bit to 1 if both bits are 1	x & y	
|	OR	Sets each bit to 1 if one of two bits is 1	x | y	
^	XOR	Sets each bit to 1 if only one of two bits is 1	x ^ y	
~	NOT	Inverts all the bits	~x	
<<	Zero fill left shift	Shift left by pushing zeros in from the right and let the leftmost bits fall off	x << 2	
>>	Signed right shift	Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off	x >> 2


example :

print(6 ^ 3)



"""
The ^ operator compares each bit and set it to 1 if only one is 1, otherwise (if both are 1 or both are 0) it is set to 0:

6 = 0000000000000110
3 = 0000000000000011
--------------------
5 = 0000000000000101
====================

Decimal numbers and their binary values:
0 = 0000000000000000
1 = 0000000000000001
2 = 0000000000000010
3 = 0000000000000011
4 = 0000000000000100
5 = 0000000000000101
6 = 0000000000000110
7 = 0000000000000111
"""

kết quả trả về tương ứng = 5

-----------------------------------------
ưu tiên điều hành
Ưu tiên toán tử mô tả thứ tự thực hiện các thao tác.

Ví dụ
Dấu ngoặc đơn có quyền ưu tiên cao nhất, nghĩa là các biểu thức bên trong dấu ngoặc đơn phải được đánh giá trước:

print((6 + 3) - (6 + 3)) = 0

Phép nhân *có mức độ ưu tiên cao hơn phép cộng +và do đó phép nhân được đánh giá trước phép cộng:

print(100 + 5 * 3)
Thứ tự ưu tiên được mô tả trong bảng bên dưới, bắt đầu với ưu tiên cao nhất ở trên cùng:

()	Parentheses	
**	Exponentiation	
+x  -x  ~x	Unary plus, unary minus, and bitwise NOT	
*  /  //  %	Multiplication, division, floor division, and modulus	
+  -	Addition and subtraction	
<<  >>	Bitwise left and right shifts	
&	Bitwise AND	
^	Bitwise XOR	
|	Bitwise OR	
==  !=  >  >=  <  <=  is  is not  in  not in 	Comparisons, identity, and membership operators	
not	Logical NOT	
and	AND	
or	OR

Nếu hai toán tử có cùng mức độ ưu tiên, thì biểu thức được đánh giá từ trái sang phải.

Ví dụ
Phép cộng +và phép trừ -có cùng mức độ ưu tiên và do đó, chúng tôi đánh giá biểu thức từ trái sang phải:

print(5 + 4 - 7 + 3) = 5
